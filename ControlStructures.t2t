Control Structures


%!includeconf: config.t2t

== if ==

``` T core.if!(T)( cond:bool, ifTrue:{(T)()}, ifFalse:{(T)()} = noop )

An if statement takes a condition and executes the first block if it is true
otherwise the other ( if provided ).  The value of the executed block is
returned.

```
    var cond = false;
	if (cond, {sout.writeln("Not printed.")});

	cond = true;
	if (cond, {sout.writeln("Printed.")});

	if (cond, {sout.writeln("Printed.")}, {sout.writeln("Not printed.")});

	cond = false;
	if (cond, {sout.writeln("Not printed.")}, {sout.writeln("Printed.")});
```
== elif ==

``` {(T)()} core.elif!(T)( cond:bool, ifTrue:{(T)()}, ifFalse:{(T)()} = noop )

This function returns a block that will call ``ifTrue`` if ``cond`` is true or
``ifFalse`` otherwise.

```
    var i = 4;

    if   i == 1, { sout.writeln("1") },
    elif i == 2, { sout.writeln("2") },
    elif i == 2, { sout.writeln("3") },
    elif i == 2, { sout.writeln("4") };

```

== while ==

``` () while!(T)( cond:{(bool)()}, code:{} )

The while statement performs the following steps.

# Evaluate cond.  If true quit.
# Evaluate code.
# Go back to step 1.

```
	var tries:uint = 0;

	while ( 2^^tries < 1_000_000 )
		{ tries++; }

	sout.write("You need ").write(tries, " bytes to store 1 000 000.");
```

=== dowhile ===

``` () dowhile!(T)( cond:{()(bool)}, code:{} )

The same as while except it doesn't evaluate the condition on the first pass.
(start at step 2)

== for ==

``` () for!(T)( init:{}, cond:{}, inc:{}, code:{} )

The for loop performs the following steps.

# Evaluate init.
# Evaluate cond.  If true quit.
# Evaluate code.
# Evaluate inc.
# Go back to step 2.

The for loop cannot be expressed perfectly as a function call as the variables
declared in the ``init`` block are available in the other three.  If it were
to be translated into a while loop it would look like.  Except ``{inc}`` will
be called on continue.

```
	for ( /*init*/ , /*cond*/, /*inc*/, /*code*/ )

	// is equivalent to:

	{
		/*init*/;
		while /*cond*/,
		{
			/*code*/;
			/*inc*/;
		};
	}
```
