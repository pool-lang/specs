{"ts":1347632252441,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Control Structures\n\n\n%!includeconf: config.t2t\n\n== if ==\n\n``` T core.if!(T)( cond:bool, ifTrue:block(T)(), ifFalse:block(T)() = noop )\n\nAn if statement takes a condition and executes the first block if it is true\notherwise the other ( if provided ).  The value of the executed block is\nreturned.\n\n```\n\tvar cond = false;\n\tif (cond, sout.writeln(\"Not printed.\"));\n\n\tcond = true;\n\tif (cond, sout.writeln(\"Printed.\"));\n\n\tif (cond, sout.writeln(\"Printed.\"), sout.writeln(\"Not printed.\"));\n\n\tcond = false;\n\tif (cond, sout.writeln(\"Not printed.\"), sout.writeln(\"Printed.\"));\n```\n\n=== Syntactic Sugar ===\nIt doesn't look that bad but when you get into if else's things start to get\nugly.  For ``if``s without an else clause you can use the trailing-block\nfunction call syntax.  With an else clause the if statement has a special syntax\nusing the else keyword.\n\n```\n\tvar cond = true;\n\n\tif (cond) sout.writeln(\"Printed\");\n\n\tif (cond) sout.writeln(\"Printed\");      // Now that's what you were looking\n\telse      sout.writeln(\"Not printed.\"); // for.\n```\n\n=== else if ===\nBy chaining if statements together you can easily achieve ``else if``\nstatements.\n\n```\n\tvar cond = 7;\n\n\tif      ( cond == 1 ) sout.writeln(\"1\");\n\telse if ( cond == 2 ) sout.writeln(\"2\");\n\telse if ( cond == 3 ) sout.writeln(\"3\");\n\telse if ( cond == 4 ) sout.writeln(\"4\");\n\telse if ( cond == 5 ) sout.writeln(\"5\");\n\telse                  sout.writeln(\"I give up, it's big.\");\n```\n\n== while ==\n\n``` () while!(T)( block(bool)() cond, block(uint)() code )\n\nThe while statement performs the following steps.\n\n# Evaluate cond.  If true quit.\n# Evaluate code.\n# Go back to step 1.\n\n```\n\tvar tries:uint = 0;\n\n\twhile ( 2^^tries < 1_000_000 )\n\t\ttries++;\n\n\tsout.write(\"You need \").write(tries, \" bytes to store 1 000 000.\");\n```\n\n=== dowhile ===\n\n``` () dowhile!(T)( block(bool)() cond, block(uint)() code )\n\nThe same as while except it doesn't evaluate the condition on the first pass.\n(start at step 2)\n\n== for ==\n\n``` () for!(T)( block()() init, block(bool)() cond, block()() inc, block(uint)() code )\n\nThe for loop performs the following steps.\n\n# Evaluate init.\n# Evaluate cond.  If true quit.\n# Evaluate code.\n# Evaluate inc.\n# Go back to step 2.\n\nThe for loop cannot be expressed perfectly as a function call as the variables\ndeclared in the ``init`` block are available in the other three.  If it were\nto be translated into a while loop it would look like.  Except ``{inc}`` will\nbe called on continue.\n\n```\n\tfor ( {init} , {cond}, {inc} ) {code}\n\n\t// is equivalent to:\n\n\t{\n\t\t{init};\n\t\twhile ({cond})\n\t\t{\n\t\t\t{code};\n\t\t\t{inc};\n\t\t}\n\t}\n```\n"]],"start1":0,"start2":0,"length1":0,"length2":2593}]],"length":2593}
