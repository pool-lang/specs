{"ts":1347632236150,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Aliases\n\n\n%!includeconf: config.t2t\n\n== Basic Usage ==\nAn alias is used to give a symbol a new name.  The two names can be used\ninterchangeably and will behave identically.  An example of an alias is below.\n\n```\n\talias languages::vitrualmachine::java::files::jar::Jar JJar;\n```\n\nNow you may use JJar in place of languages::vitrualmachine::java::files::jar.\nThis allows the following code:\n\n```\n\t// main.pool\n\n\timport containers::jar;\n\timport languages::vitrualmachine::java::files::jar;\n\n\t{ int main ( String[] arg );\n\t\tvar jars = new containers::jar::Jar();\n\n\t\tjars.insert(new languages::vitrualmachine::java::files::jar::Jar(arg[1]));\n\t}\n```\n\nbecomes:\n\n```\n\t// main.pool\n\n\timport containers::jar;\n\timport languages::vitrualmachine::java::files::jar;\n\n\talias containers::jar::Jar GJar;\n\talias languages::vitrualmachine::java::files::jar::Jar JJar;\n\n\t{ int main ( String[] arg );\n\t\tvar jars = new GJar();\n\n\t\tjars.insert(new JJar(arg[1]));\n\t}\n```\n\nAllowing you to use both your glass jars and ``.jar``s with ease.\n\nIt is usefull to give meaningful names to types.\n```\n\t{ (int32, uint) getDateFromServer ( uint64, uint64 ); /+ code +/ }\n\n\t// Pretty meaningless based on it's type signature.\n\n\talias int32  TimeStamp;\n\talias uint   ResponseCode;\n\talias uint64 PostId;\n\talias uint64 AuthToken;\n\n\t// Now the definition is more meaningful.\n\n\t{ (TimeStamp, ResponseCode) getDateFromServer ( AuthToken, PostId ); /+ code +/ }\n```\n\n== Disambiguating Aliases ==\nSometimes, like in the previous examples you get two symbols with the same name\nfrom two different modules.  If you want to use one without having to fully\nqualify paths you can alias the symbol over itself.\n\n```\n\talias containers::jar::Jar Jar;\n```\n\nNow, any reference to ``Jar`` will refer to ``containers::jar::Jar`` without\nneeding to be fully qualified.\n\n== Scoped Aliases ==\nAliases are only valid in the scope in which they are declared and only below\nwhere they exist in the source file.\n\n```\n\tvar score :Score = 1_000_000; // ERROR: Score is undefined.\n\n\talias uint Score;\n\n\tvar score :Score = 1_000_000; // Good.\n\n\t{\n\t\talias uint32 Timeval;\n\n\t\tvar t :Timeval = 779573880;\n\t}\n\n\tvar curTime :Timeval = 779573880; // ERROR: Timeval undefined.\n```\n\nThis is a recommended way of using aliases as shortcuts as the definition is\nclose to the useage.  This prevents confusion when unreadable names are used.\n"]],"start1":0,"start2":0,"length1":0,"length2":2362}]],"length":2362}
